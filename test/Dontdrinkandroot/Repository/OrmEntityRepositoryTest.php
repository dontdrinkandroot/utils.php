<?php


namespace Dontdrinkandroot\Repository;

use Dontdrinkandroot\DoctrineOrmTestCase;
use Dontdrinkandroot\Entity\AssignedIdExampleEntity;
use Dontdrinkandroot\Entity\GeneratedIdExampleEntity;

class OrmEntityRepositoryTest extends DoctrineOrmTestCase
{

    /**
     * {@inheritdoc}
     */
    protected function getDataSet()
    {
        return $this->createXMLDataSet(realpath(__DIR__ . '/dataset.xml'));
    }

    public function testFindPaginatedBy()
    {
        $generatedIdExampleEntityRepository = $this->getGeneratedIdExampleEntityRepository();
        $paginatedResult = $generatedIdExampleEntityRepository->findPaginatedBy(1, 2);
        $this->assertEquals(2, $paginatedResult->getPagination()->getPerPage());

        $paginatedResult = $generatedIdExampleEntityRepository->findPaginatedBy(2, 2);
        $this->assertCount(1, $paginatedResult->getResults());
    }

    public function testSaveAutoGeneratedIdEntity()
    {
        $generatedIdExampleEntityRepository = $this->getGeneratedIdExampleEntityRepository();

        $entity = new GeneratedIdExampleEntity();
        $entity->setName('name');
        $entity = $generatedIdExampleEntityRepository->persist($entity);
        $this->assertEquals(4, $entity->getId());

        $this->assertNotNull($generatedIdExampleEntityRepository->findOneBy(['name' => 'name']));
        $this->assertCount(4, $generatedIdExampleEntityRepository->findAll());

        $this->entityManager->detach($entity);
        $entity = $generatedIdExampleEntityRepository->merge($entity);

        $entity->setName('changedName');
        $generatedIdExampleEntityRepository->flush($entity);
        $this->assertEquals(4, $entity->getId());
        $this->assertNotNull($generatedIdExampleEntityRepository->findOneBy(['name' => 'changedName']));
        $this->assertCount(4, $generatedIdExampleEntityRepository->findAll());

        $entity->setName('changedName2');
        $generatedIdExampleEntityRepository->flush($entity);
        $this->assertEquals(4, $entity->getId());
        $this->assertNotNull($generatedIdExampleEntityRepository->findOneBy(['name' => 'changedName2']));
        $this->assertCount(4, $generatedIdExampleEntityRepository->findAll());
    }

    public function testSaveAssignedIdEntity()
    {
        $assignedIdExampleEntityRepository = $this->getAssignedIdExampleEntityRepository();

        $entity = new AssignedIdExampleEntity();
        $entity->setId(666);
        $entity->setName('name');
        $entity = $assignedIdExampleEntityRepository->persist($entity);
        $this->assertEquals(666, $entity->getId());

        $this->assertNotNull($assignedIdExampleEntityRepository->findOneBy(['name' => 'name']));
        $this->assertCount(1, $assignedIdExampleEntityRepository->findAll());

        $this->entityManager->detach($entity);
        $entity = $assignedIdExampleEntityRepository->merge($entity);

        $entity->setName('changedName');
        $assignedIdExampleEntityRepository->flush($entity);
        $this->assertEquals(666, $entity->getId());
        $this->assertNotNull($assignedIdExampleEntityRepository->findOneBy(['name' => 'changedName']));
        $this->assertCount(1, $assignedIdExampleEntityRepository->findAll());

        $entity->setName('changedName2');
        $assignedIdExampleEntityRepository->flush($entity);
        $this->assertEquals(666, $entity->getId());
        $this->assertNotNull($assignedIdExampleEntityRepository->findOneBy(['name' => 'changedName2']));
        $this->assertCount(1, $assignedIdExampleEntityRepository->findAll());
    }

    public function testRemove()
    {
        $generatedIdExampleEntityRepository = $this->getGeneratedIdExampleEntityRepository();
        $this->assertCount(3, $generatedIdExampleEntityRepository->findAll());
        $entity = $generatedIdExampleEntityRepository->find(1);
        $generatedIdExampleEntityRepository->remove($entity);
        $this->assertCount(2, $generatedIdExampleEntityRepository->findAll());
    }

    public function testRemoveAllByIterating()
    {
        $generatedIdExampleEntityRepository = $this->getGeneratedIdExampleEntityRepository();
        $this->assertCount(3, $generatedIdExampleEntityRepository->findAll());
        $generatedIdExampleEntityRepository->removeAll(true, true);
        $this->assertCount(0, $generatedIdExampleEntityRepository->findAll());
    }

    public function testRemoveAllByQuery()
    {
        $generatedIdExampleEntityRepository = $this->getGeneratedIdExampleEntityRepository();
        $this->assertCount(3, $generatedIdExampleEntityRepository->findAll());
        $generatedIdExampleEntityRepository->removeAll(true, false);
        $this->assertCount(0, $generatedIdExampleEntityRepository->findAll());
    }

    public function testCountAll()
    {
        $generatedIdExampleEntityRepository = $this->getGeneratedIdExampleEntityRepository();
        $this->assertEquals(3, $generatedIdExampleEntityRepository->countAll());
    }

    public function testRemoveById()
    {
        $generatedIdExampleEntityRepository = $this->getGeneratedIdExampleEntityRepository();
        $this->assertCount(3, $generatedIdExampleEntityRepository->findAll());
        $entity = $generatedIdExampleEntityRepository->find(2);
        $this->assertNotNull($entity);
        $generatedIdExampleEntityRepository->removeById(2);
        $this->assertCount(2, $generatedIdExampleEntityRepository->findAll());
        $this->assertNull($generatedIdExampleEntityRepository->find(2));
    }

    /**
     * @return GeneratedIdExampleEntityRepository
     */
    protected function getGeneratedIdExampleEntityRepository()
    {
        return $this->entityManager->getRepository(GeneratedIdExampleEntity::class);
    }

    /**
     * @return AssignedIdExampleEntityRepository
     */
    protected function getAssignedIdExampleEntityRepository()
    {
        return $this->entityManager->getRepository(AssignedIdExampleEntity::class);
    }
}
